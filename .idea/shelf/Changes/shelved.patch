Index: SEMANA 12/mi_proyecto_flask/app.py
===================================================================
diff --git a/SEMANA 12/mi_proyecto_flask/app.py b/SEMANA 12/mi_proyecto_flask/app.py
deleted file mode 100644
--- a/SEMANA 12/mi_proyecto_flask/app.py	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
+++ /dev/null	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
@@ -1,123 +0,0 @@
-from flask import Flask, render_template, request, redirect, url_for
-import sqlite3
-import os
-import json
-import csv
-
-app = Flask(__name__)
-
-# 📌 Ruta de la base de datos
-DB_PATH = "database/usuarios.db"
-
-# 📌 Función para conectar a la base de datos SQLite
-def conectar_bd():
-    return sqlite3.connect(DB_PATH)
-
-# 📌 Función para crear la tabla en SQLite si no existe
-def crear_tabla():
-    conexion = conectar_bd()
-    cursor = conexion.cursor()
-    cursor.execute("""
-        CREATE TABLE IF NOT EXISTS usuarios (
-            id INTEGER PRIMARY KEY AUTOINCREMENT,
-            nombre TEXT NOT NULL,
-            correo TEXT NOT NULL
-        )
-    """)
-    conexion.commit()
-    conexion.close()
-
-# 📌 Función para guardar datos en TXT
-def guardar_en_txt(nombre, correo):
-    with open("datos/datos.txt", "a", encoding="utf-8") as f:
-        f.write(f"{nombre} - {correo}\n")
-
-# 📌 Función para guardar datos en JSON
-def guardar_en_json(nombre, correo):
-    archivo = "datos/datos.json"
-    try:
-        with open(archivo, "r", encoding="utf-8") as f:
-            datos = json.load(f)
-    except (FileNotFoundError, json.JSONDecodeError):
-        datos = {"usuarios": []}
-
-    datos["usuarios"].append({"nombre": nombre, "correo": correo})
-
-    with open(archivo, "w", encoding="utf-8") as f:
-        json.dump(datos, f, indent=4)
-
-# 📌 Función para guardar datos en CSV
-def guardar_en_csv(nombre, correo):
-    archivo = "datos/datos.csv"
-    existe = os.path.isfile(archivo)
-
-    with open(archivo, "a", newline="", encoding="utf-8") as f:
-        escritor = csv.writer(f)
-        if not existe:
-            escritor.writerow(["nombre", "correo"])  # Cabecera si es nuevo
-        escritor.writerow([nombre, correo])
-
-# 📌 Ruta principal (Inicio)
-@app.route('/')
-def index():
-    return render_template('index.html')
-
-# 📌 Ruta del formulario
-@app.route('/formulario', methods=['GET', 'POST'])
-def formulario():
-    if request.method == 'POST':
-        nombre = request.form['nombre']
-        correo = request.form['correo']
-
-        # Guardar en SQLite
-        conexion = conectar_bd()
-        cursor = conexion.cursor()
-        cursor.execute("INSERT INTO usuarios (nombre, correo) VALUES (?, ?)", (nombre, correo))
-        conexion.commit()
-        conexion.close()
-
-        # Guardar en TXT, JSON y CSV
-        guardar_en_txt(nombre, correo)
-        guardar_en_json(nombre, correo)
-        guardar_en_csv(nombre, correo)
-
-        return redirect(url_for('resultado'))
-    return render_template('formulario.html')
-
-# 📌 Ruta para ver los datos desde SQLite
-@app.route('/resultado')
-def resultado():
-    conexion = conectar_bd()
-    cursor = conexion.cursor()
-    cursor.execute("SELECT nombre, correo FROM usuarios")
-    usuarios = cursor.fetchall()
-    conexion.close()
-    return render_template('resultado.html', usuarios=usuarios)
-
-# 📌 Ruta para ver los datos desde TXT
-@app.route('/ver_txt')
-def ver_txt():
-    with open("datos/datos.txt", "r", encoding="utf-8") as f:
-        contenido = f.readlines()
-    return render_template("resultado.html", usuarios=[line.strip().split(" - ") for line in contenido])
-
-# 📌 Ruta para ver los datos desde JSON
-@app.route('/ver_json')
-def ver_json():
-    with open("datos/datos.json", "r", encoding="utf-8") as f:
-        datos = json.load(f)
-    return render_template("resultado.html", usuarios=[[u["nombre"], u["correo"]] for u in datos["usuarios"]])
-
-# 📌 Ruta para ver los datos desde CSV
-@app.route('/ver_csv')
-def ver_csv():
-    with open("datos/datos.csv", "r", encoding="utf-8") as f:
-        lector = csv.reader(f)
-        next(lector)  # Saltamos la cabecera
-        datos = [fila for fila in lector]
-    return render_template("resultado.html", usuarios=datos)
-
-# 📌 Ejecutar la aplicación
-if __name__ == '__main__':
-    crear_tabla()  # Crea la tabla si no existe
-    app.run(debug=True)
Index: SEMANA 12/mi_proyecto_flask/datos/datos.csv
===================================================================
diff --git a/SEMANA 12/mi_proyecto_flask/datos/datos.csv b/SEMANA 12/mi_proyecto_flask/datos/datos.csv
deleted file mode 100644
--- a/SEMANA 12/mi_proyecto_flask/datos/datos.csv	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
+++ /dev/null	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
@@ -1,2 +0,0 @@
-Diego Herrera ,diegoherrera@gmail.com
-jenicita,jenicitachimbo@gmail.com
Index: SEMANA 12/mi_proyecto_flask/datos/datos.json
===================================================================
diff --git a/SEMANA 12/mi_proyecto_flask/datos/datos.json b/SEMANA 12/mi_proyecto_flask/datos/datos.json
deleted file mode 100644
--- a/SEMANA 12/mi_proyecto_flask/datos/datos.json	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
+++ /dev/null	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
@@ -1,8 +0,0 @@
-{
-    "usuarios": [
-        {
-            "nombre": "jenicita",
-            "correo": "jenicitachimbo@gmail.com"
-        }
-    ]
-}
Index: SEMANA 12/mi_proyecto_flask/datos/datos.txt
===================================================================
diff --git a/SEMANA 12/mi_proyecto_flask/datos/datos.txt b/SEMANA 12/mi_proyecto_flask/datos/datos.txt
deleted file mode 100644
--- a/SEMANA 12/mi_proyecto_flask/datos/datos.txt	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
+++ /dev/null	(revision 9e8b42dfb6cb09f5bb14db7027642bd014d2b4e2)
@@ -1,2 +0,0 @@
-Diego Herrera  - diegoherrera@gmail.com
-jenicita - jenicitachimbo@gmail.com
Index: SEMANA 13/mi_proyecto_flask/datos/datos.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEMANA 13/mi_proyecto_flask/datos/datos.csv b/SEMANA 13/mi_proyecto_flask/datos/datos.csv
new file mode 100644
--- /dev/null	(date 1742391465751)
+++ b/SEMANA 13/mi_proyecto_flask/datos/datos.csv	(date 1742391465751)
@@ -0,0 +1,5 @@
+nombre
+
+
+Diego Herrera ,diegoherrera@gmail.com
+miguel guachanbozaaa,carlaaaaaa@gmail.com
Index: SEMANA 13/mi_proyecto_flask/datos/datos.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEMANA 13/mi_proyecto_flask/datos/datos.txt b/SEMANA 13/mi_proyecto_flask/datos/datos.txt
new file mode 100644
--- /dev/null	(date 1742391465752)
+++ b/SEMANA 13/mi_proyecto_flask/datos/datos.txt	(date 1742391465752)
@@ -0,0 +1,3 @@
+Ejemplo de archivo de texto
+Diego Herrera  - diegoherrera@gmail.com
+miguel guachanbozaaa - carlaaaaaa@gmail.com
Index: SEMANA 13/mi_proyecto_flask/datos/datos.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEMANA 13/mi_proyecto_flask/datos/datos.json b/SEMANA 13/mi_proyecto_flask/datos/datos.json
new file mode 100644
--- /dev/null	(date 1742391465752)
+++ b/SEMANA 13/mi_proyecto_flask/datos/datos.json	(date 1742391465752)
@@ -0,0 +1,12 @@
+{
+    "usuarios": [
+        {
+            "nombre": "Diego Herrera ",
+            "correo": "diegoherrera@gmail.com"
+        },
+        {
+            "nombre": "miguel guachanbozaaa",
+            "correo": "carlaaaaaa@gmail.com"
+        }
+    ]
+}
\ No newline at end of file
Index: SEMANA 13/mi_proyecto_flask/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEMANA 13/mi_proyecto_flask/app.py b/SEMANA 13/mi_proyecto_flask/app.py
new file mode 100644
--- /dev/null	(date 1742391465748)
+++ b/SEMANA 13/mi_proyecto_flask/app.py	(date 1742391465748)
@@ -0,0 +1,101 @@
+from flask import Flask, render_template, request, redirect, url_for
+import json
+import csv
+from Conexion.conexion import conectar_mysql  # Importa la función de conexión a MySQL
+
+app = Flask(__name__)
+
+# 📌 Función para crear la tabla en MySQL si no existe
+def crear_tabla_mysql():
+    conexion = conectar_mysql()
+    if conexion:
+        cursor = conexion.cursor()
+        cursor.execute("""
+            CREATE TABLE IF NOT EXISTS usuarios (
+                id_usuario INT AUTO_INCREMENT PRIMARY KEY,
+                nombre VARCHAR(255) NOT NULL,
+                correo VARCHAR(255) NOT NULL
+            )
+        """)
+        conexion.commit()
+        conexion.close()
+
+# 📌 Función para guardar datos en MySQL
+def guardar_en_mysql(nombre, correo):
+    conexion = conectar_mysql()
+    if conexion:
+        cursor = conexion.cursor()
+        cursor.execute("INSERT INTO usuarios (nombre, correo) VALUES (%s, %s)", (nombre, correo))
+        conexion.commit()
+        conexion.close()
+
+# 📌 Ruta para verificar la conexión a MySQL
+@app.route('/test_db')
+def test_db():
+    conexion = conectar_mysql()
+    if conexion:
+        return "Conexión exitosa a la base de datos MySQL!"
+    else:
+        return "Error en la conexión a MySQL."
+
+# 📌 Ruta principal (Inicio)
+@app.route('/')
+def index():
+    return render_template('index.html')
+
+# 📌 Ruta del formulario
+@app.route('/formulario', methods=['GET', 'POST'])
+def formulario():
+    if request.method == 'POST':
+        nombre = request.form['nombre']
+        correo = request.form['correo']
+
+        # Guardar en MySQL
+        guardar_en_mysql(nombre, correo)
+
+        # Guardar en TXT, JSON y CSV
+        guardar_en_txt(nombre, correo)
+        guardar_en_json(nombre, correo)
+        guardar_en_csv(nombre, correo)
+
+        return redirect(url_for('resultado'))
+    return render_template('formulario.html')
+
+# 📌 Ruta para ver los datos desde MySQL
+@app.route('/resultado')
+def resultado():
+    conexion = conectar_mysql()
+    if conexion:
+        cursor = conexion.cursor()
+        cursor.execute("SELECT nombre, correo FROM usuarios")
+        usuarios = cursor.fetchall()
+        conexion.close()
+        return render_template('resultado.html', usuarios=usuarios)
+
+# 📌 Ruta para ver los datos desde TXT
+@app.route('/ver_txt')
+def ver_txt():
+    with open("datos/datos.txt", "r", encoding="utf-8") as f:
+        contenido = f.readlines()
+    return render_template("resultado.html", usuarios=[line.strip().split(" - ") for line in contenido])
+
+# 📌 Ruta para ver los datos desde JSON
+@app.route('/ver_json')
+def ver_json():
+    with open("datos/datos.json", "r", encoding="utf-8") as f:
+        datos = json.load(f)
+    return render_template("resultado.html", usuarios=[[u["nombre"], u["correo"]] for u in datos["usuarios"]])
+
+# 📌 Ruta para ver los datos desde CSV
+@app.route('/ver_csv')
+def ver_csv():
+    with open("datos/datos.csv", "r", encoding="utf-8") as f:
+        lector = csv.reader(f)
+        next(lector)  # Saltamos la cabecera
+        datos = [fila for fila in lector]
+    return render_template("resultado.html", usuarios=datos)
+
+# 📌 Ejecutar la aplicación
+if __name__ == '__main__':
+    crear_tabla_mysql()  # Crea la tabla si no existe
+    app.run(debug=True)
Index: SEMANA 13/mi_proyecto_flask/conexion/conexion.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SEMANA 13/mi_proyecto_flask/conexion/conexion.py b/SEMANA 13/mi_proyecto_flask/conexion/conexion.py
new file mode 100644
--- /dev/null	(date 1742391465749)
+++ b/SEMANA 13/mi_proyecto_flask/conexion/conexion.py	(date 1742391465749)
@@ -0,0 +1,14 @@
+import mysql.connector
+
+def obtener_conexion():
+    try:
+        conexion = mysql.connector.connect(
+            host="localhost",
+            user="root",
+            password="1996",
+            database="desarrollo_web"
+        )
+        return conexion
+    except mysql.connector.Error as err:
+        print(f"❌ Error al conectar con MySQL: {err}")
+        return None
diff --git a/SEMANA 12/mi_proyecto_flask/templates/base.html b/SEMANA 13/mi_proyecto_flask/templates/base.html
rename from SEMANA 12/mi_proyecto_flask/templates/base.html
rename to SEMANA 13/mi_proyecto_flask/templates/base.html
diff --git a/SEMANA 12/mi_proyecto_flask/templates/index.html b/SEMANA 13/mi_proyecto_flask/templates/index.html
rename from SEMANA 12/mi_proyecto_flask/templates/index.html
rename to SEMANA 13/mi_proyecto_flask/templates/index.html
diff --git a/SEMANA 12/mi_proyecto_flask/templates/resultado.html b/SEMANA 13/mi_proyecto_flask/templates/resultado.html
rename from SEMANA 12/mi_proyecto_flask/templates/resultado.html
rename to SEMANA 13/mi_proyecto_flask/templates/resultado.html
diff --git a/SEMANA 12/mi_proyecto_flask/templates/formulario.html b/SEMANA 13/mi_proyecto_flask/templates/formulario.html
rename from SEMANA 12/mi_proyecto_flask/templates/formulario.html
rename to SEMANA 13/mi_proyecto_flask/templates/formulario.html
diff --git a/SEMANA 12/mi_proyecto_flask/.gitignore b/SEMANA 13/mi_proyecto_flask/.gitignore
rename from SEMANA 12/mi_proyecto_flask/.gitignore
rename to SEMANA 13/mi_proyecto_flask/.gitignore
diff --git a/SEMANA 12/mi_proyecto_flask/requirements.txt b/SEMANA 13/mi_proyecto_flask/requirements.txt
rename from SEMANA 12/mi_proyecto_flask/requirements.txt
rename to SEMANA 13/mi_proyecto_flask/requirements.txt
diff --git a/SEMANA 12/mi_proyecto_flask/static/styles.css b/SEMANA 13/mi_proyecto_flask/static/styles.css
rename from SEMANA 12/mi_proyecto_flask/static/styles.css
rename to SEMANA 13/mi_proyecto_flask/static/styles.css
